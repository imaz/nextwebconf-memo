ES6 module
jsを書く側にとってのsyntaxが入りました（なんの？
ES6の仕様からはずれていて
どういうタグで読むのかというのもフワフワしている
specはどこにあるんだ「githubのissueでフワフワときまっている」

scriptタグっていっぱい機能がある
refer, async, cross origin ナントカ
  scriptタグは何個も書けるのでそこに同じmoduleのコードが入ってたらどうするの？
  エンコード違ったらどっちで読むの？とか
moduleが読まれて実行されるパス
script module tag を2つ書いた時にどっちが先に実行されるのか
  どっちか先に来たほうが実行されるのだとつらい

使う側からすると
  どのくらいのasync具合でくるのか
  pathの解決が大事

URL自体を書くことはできる
import from に URL を書くことができるようになる
読み込んでいるもとのモジュールのURLから解決するということは可能になる

正式にどうするというのは全然きまっていない　フワフワ
specきまってないから夢が無限に広がっているｗｗｗ

たとえばjQueryのライブありをつかうときにEUCとSJISが
同じのを2箇所以上で参照することはよくある
  エラーにするのはつらい
  DOMじゃなくてscriptから参照すること？
  scriptからAとBをよぶ　ABがそれぞれimportCってかいてたときは？
    importCってかいてたときは　そうですねぇ…（ｗｗｗ

moduleの話から…
  path解決はES6の仕様ではない
  ブラウザでの仕様の話
  Nodeの中でそこに従うギリはない
npmで書いてbrowserifyする

node.jsのルールをwebは裏切らないだろう
名前かけるし相対パスもかける
名前を扱うってことはどこかでnpmのpackage.jsonみたいなものが必要になる
W3Cのローラーのなか？で考えられている


promiseで書いておけばasync/awaitになる？
すごいスマートな仕様だなって
  そうですね、わかる

async/await またそこに戻すのかみたいなのがある
  mapがないときだけmapつくるとか

ES6 class property
  「JavaScriptにはクラスがあるわーい！」「え、それだけの表現力しかないの？」

static typing
  TypeScriptがやってるみたいに後置型で型をアノテートしていく

  TypeScriptベースで実装が進むのはうれしいけど
  現実のJSの汚さに対応するために「そんな記法対応しちゃうの…?」みたいなのがあってフクザツになりすぎる感
  不自由な構文をつくってみんなで実装した方が良いのでは

  TypeScriptの目的は既存の汚い世界にいかに型を適用していくのかっていうとこだから
  最初からきれいなのを目指しても意味が無いというか

  今あるものに型をつけるかというとそんなことはなさそう
  フルスクラッチで書きなおすか新しいもので書くときだけ型をつけて開発していくのでは

  イベントエミッターきらい
  飛んでくるオブジェクトが違うとかいうのは型づけしづらい
  パターンマッチングとかする必要があるけどJSはそういうことしなさそう
  DOMの方をどうすべきかっていうのはあんまわかんないっちゃわかんない

  t_wadaさんが型定義は自分が書かないっていっても
  それで吐き出されるJSがイマイチだったらBABELにPR送るひとがいたりとか
  そうするとBABELに提供される型定義自体が進化していく
  そんな二人三脚みたいな感じでいいんじゃないですかね

型のメリットは？
  IDEがあたまよくなる　補完してくれる
  リファクタリングを安心してできる
  言語側でIDEのデータを提供しているから
  型安全がある

アスムジェイエス？

ASTのはなし

BABELどうなの？ いつまでつかうの？
  永久に使うんじゃないの？
  言語のVersionはおいといて機能単位でバラして使うためにBABELがある
  先取りして使うためにBABELが勝手に進んでいく
  いつ機能のトランスパイルは切れるの？
    IE11は2020年まである
      1個のブラウザのためにトランスパイルするの？
        それはやりたくないからサーバ側でUAをみて出し分けるとか古の技術に
          nextつらい話ｗｗ

